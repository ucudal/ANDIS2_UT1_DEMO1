md ./service_a/logs
md ./service_b/logs

docker compose up --build

# Ping/Echo, Service A
curl http://localhost:8001/ping
# Service B
curl http://localhost:8002/ping

# Healthcheck, Service A
curl http://localhost:8001/health
# Service B
curl http://localhost:8002/health

# Probar saludo
curl http://localhost:8001/saludo

# Ejecutar pruebas de carga con K6; debería responder siempre
k6 run script.js

# Cambiar probabilidad de disponibilidad en Service B
curl -X POST http://localhost:8001/config -H "Content-Type: application/json" -d '{"prob": 0.5}'

# Ejecutar nuevmaente pruebas de carga con K6; debería fallar aproximadamente la mitad de las veces
k6 run script.js

# Rollback de probabilidad
curl -X POST http://localhost:8001/rollback

# Activar shadow mode en Service A
curl -X POST http://localhost:8001/shadow -H "Content-Type: application/json" -d '{"enable": true}'

# Ejecutar pruebas de carga con K6
k6 run script.js

# Ver logs
tail -f service_a/logs/service_a.log
tail -f service_b/logs/service_b.log









# Iniciar InfluxDB y Grafana en contenedores Docker
docker compose up -d

# Parar InfluxDB y Grafana
docker compose down





###################

# Debug

# Crear un entorno virtual
python3 -m venv venv

# Activar el entorno virtual
# Windows:
venv\Scripts\activate
# MacOS/Linux:
source venv/bin/activate

# Instalar dependencias
pip3 install -r ./service_a/requirements.txt
pip3 install -r ./service_b/requirements.txt

# Crear carpetas de logs si no existen
mkdir -p service_a/logs
mkdir -p service_b/logs

# Ejecutar el servicio B en puerto 8002
python3 -m debugpy --listen 5678 --wait-for-client -m uvicorn service_b.main:app --host
uvicorn service_b.main:app --host 0.0.0.0 --port 8001 --reload
